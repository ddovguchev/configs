local notificationManager = require ("shared.notification-manager")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local config = {
  wallpaperPath = "/Users/dzmitriy/Documents/system/pictures",
  supportedFormats = { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".webp" },
}

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
local function getImageFiles ()
  local files = {}
  local handle = io.popen (string.format ("find '%s' -type f", config.wallpaperPath))
  if not handle then
    return files
  end

  for file in handle:lines () do
    local ext = string.lower (string.match (file, "%.([^%.]+)$") or "")
    for _, format in ipairs (config.supportedFormats) do
      if format == "." .. ext then
        local filename = string.match (file, "([^/]+)$") or "Unknown"
        table.insert (files, {
          path = file,
          name = filename,
        })
        break
      end
    end
  end
  handle:close ()

  return files
end

-- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤
local function setWallpaper (imagePath)
  local fileURL = "file://" .. imagePath
  local success = true

  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏ –Ω–∞ –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
  local screens = hs.screen.allScreens ()
  for i, screen in ipairs (screens) do
    local screenSuccess = screen:desktopImageURL (fileURL)
    if not screenSuccess then
      success = false
      print ("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω " .. i .. ": " .. imagePath)
    else
      print ("–û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —ç–∫—Ä–∞–Ω " .. i .. ": " .. imagePath)
    end
  end

  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏ –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —Å—Ç–æ–ª—ã —á–µ—Ä–µ–∑ AppleScript
  local appleScript = string.format (
    [[
        tell application "System Events"
            set desktopCount to count of desktops
            set currentDesktop to 1
            
            repeat with i from 1 to desktopCount
                key code 18 using {control down}
                delay 0.1
                set picture of desktop i to "%s"
                delay 0.1
            end repeat
            
            repeat with i from 1 to (currentDesktop - 1)
                key code 19 using {control down}
                delay 0.1
            end repeat
        end tell
    ]],
    imagePath
  )

  local cmd1 = string.format ("osascript -e '%s'", appleScript)
  local result1 = os.execute (cmd1)

  -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ defaults
  local cmd2 = string.format (
    [[
        defaults write com.apple.dock persistent-apps -array
        defaults write com.apple.dock persistent-others -array
        defaults write com.apple.dock persistent-apps -array-add '{"tile-data" = {"file-data" = {"_CFURLString" = "%s"; "_CFURLStringType" = 15;};}; "tile-type" = "directory";}'
    ]],
    fileURL
  )
  local result2 = os.execute (cmd2)

  local cmd3 = "killall Dock"
  local result3 = os.execute (cmd3)

  if result1 then
    print ("‚úÖ –û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —Å—Ç–æ–ª—ã")
  end

  if result2 and result3 then
    print ("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Dock –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
  end

  if success then
    notificationManager.success (
      "‚úÖ –û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: " .. string.match (imagePath, "([^/]+)$") or "Unknown"
    )
    return true
  else
    notificationManager.error ("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤")
    return false
  end
end

-- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
local function switchLanguage ()
  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º Hammerspoon –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  local currentSource = hs.keycodes.currentSourceID ()
  local sources = hs.keycodes.sources ()

  if sources and #sources > 1 then
    local currentIndex = 1
    for i, source in ipairs (sources) do
      if source == currentSource then
        currentIndex = i
        break
      end
    end

    local nextIndex = currentIndex % #sources + 1
    hs.keycodes.setMethod (sources[nextIndex])
    notificationManager.info ("üåê –Ø–∑—ã–∫: " .. sources[nextIndex])
    print ("–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: " .. sources[nextIndex])
  else
    -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ AppleScript
    local appleScript = [[
            tell application "System Events"
                tell process "SystemUIServer"
                    click (menu bar item 1 of menu bar 1 whose description contains "input source")
                    click menu item 2 of menu 1 of menu bar item 1 of menu bar 1
                end tell
            end tell
        ]]

    local result = os.execute ("osascript -e '" .. appleScript .. "'")
    if result then
      notificationManager.info ("üåê –Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω")
      print ("–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ AppleScript")
    else
      notificationManager.warning ("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫")
      print ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫")
    end
  end
end

-- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Nix
local function updateNix ()
  notificationManager.info ("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nix...")
  print ("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nix...")

  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ nix
  local applyCmd =
    "cd /Users/dzmitriy/Documents/system/configs/darwin-dotfiles && /run/current-system/sw/bin/nix run --extra-experimental-features 'nix-command flakes' nix-darwin -- switch --flake . > /tmp/nix-output.log 2>&1"

  -- –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
  local handle = io.popen (applyCmd .. " &")
  if handle then
    handle:close ()

    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    notificationManager.info ("üîÑ Nix –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ...")
    print ("Nix –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ")

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    hs.timer.doAfter (30, function ()
      local logFile = io.open ("/tmp/nix-output.log", "r")
      if logFile then
        local content = logFile:read ("*a")
        logFile:close ()

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if
          content:find ("Activating home%-manager configuration")
          or content:find ("Activating home-manager configuration")
          or content:find ("setupLaunchAgents")
        then
          notificationManager.success ("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nix –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
          print ("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nix –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        else
          -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞
          local checkCmd = "ps aux | grep 'nix run' | grep -v grep"
          local checkHandle = io.popen (checkCmd)
          if checkHandle then
            local checkOutput = checkHandle:read ("*a")
            checkHandle:close ()

            if checkOutput == "" then
              -- –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å–ø–µ—Ö–∞
              notificationManager.warning ("‚ö†Ô∏è Nix –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—è—Å–µ–Ω")
              print ("‚ö†Ô∏è Nix –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—è—Å–µ–Ω")
              print ("–õ–æ–≥: " .. content)
            else
              -- –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
              notificationManager.info ("üîÑ Nix –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
              print ("üîÑ Nix –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            end
          else
            notificationManager.error ("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Nix")
            print ("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Nix")
          end
        end
      else
        notificationManager.warning ("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ Nix")
        print ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ Nix")
      end
    end)
  else
    notificationManager.error ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Nix –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    print ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Nix –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
  end
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ–±–æ–µ–≤
local function showWallpaperSelector ()
  local imageFiles = getImageFiles ()

  if #imageFiles == 0 then
    notificationManager.warning ("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: " .. config.wallpaperPath)
    print ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: " .. config.wallpaperPath)
    return
  end

  local choices = {}
  for _, file in ipairs (imageFiles) do
    table.insert (choices, {
      text = file.name,
      subText = file.path,
      path = file.path,
    })
  end

  local chooser = hs.chooser.new (function (choice)
    if not choice then
      return
    end

    if choice.path then
      setWallpaper (choice.path)
    end
  end)

  chooser:choices (choices)
  chooser:show ()
end

-- –ü—Ä–∏–≤—è–∑–∫–∞ —Ö–æ—Ç–∫–æ–≤
local function bindHotkeys ()
  print ("üîß –ü—Ä–∏–≤—è–∑–∫–∞ —Ö–æ—Ç–∫–æ–≤...")

  -- Cmd+Ctrl+W - —Å–µ–ª–µ–∫—Ç–æ—Ä –æ–±–æ–µ–≤
  hs.hotkey.bind ({ "cmd", "ctrl" }, "w", function ()
    print ("üéØ Wallpaper hotkey pressed!")
    showWallpaperSelector ()
  end)

  -- Cmd+Space - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
  hs.hotkey.bind ({ "cmd" }, "space", function ()
    print ("üéØ Language hotkey pressed!")
    switchLanguage ()
  end)

  -- Cmd+Ctrl+K - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Nix
  hs.hotkey.bind ({ "cmd", "ctrl" }, "k", function ()
    print ("üéØ Nix hotkey pressed!")
    updateNix ()
  end)

  -- Cmd+Ctrl+R - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Hammerspoon
  hs.hotkey.bind ({ "cmd", "ctrl" }, "r", function ()
    notificationManager.info ("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
    hs.timer.doAfter (1, hs.reload)
  end)

  print ("‚úÖ –í—Å–µ —Ö–æ—Ç–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã")
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bindHotkeys ()
notificationManager.success ("‚úÖ Hammerspoon –∑–∞–≥—Ä—É–∂–µ–Ω")
print ("‚úÖ Hammerspoon configuration loaded")
